import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert XML RSS (version 2.0) feeds from a given URL into the
 * corresponding HTML output file, which contain links to individual news
 * pages..
 *
 * @JakeAlvord
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree newTree = new XMLTree1(url);

        // the new XMLTree is the individual website's RSS feed

        outputHeader(newTree.child(0), out);

        // calls method outputHeader

        int count = 0;
        while (newTree.child(0).numberOfChildren() > count) {
            if (getChildElement(newTree.child(0).child(count), "item") >= 0) {
                processItem(newTree.child(0).child(count), out);
            }
            count++;
        }

        // calls methods getChildElement and processItem

        outputFooter(out);

        // calls method outputFooter
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body> <h1>the page title inside a link to the <channel> link<h1>
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        /*
         * checks if the page has a title, and if it does not it will print
         * "no title available"
         */

        int count = 0;
        int i = -1;
        while (channel.numberOfChildren() > count) {
            if (getChildElement(channel.child(count), "title") >= 0) {
                i = count;
            }
            count++;
        }

        if (i > -1) {
            if (channel.child(i).numberOfChildren() == 0) {
                out.print("No title available");
            } else {
                out.print((channel.child(i).child(0)).label());
            }
        } else {
            out.print("No title available");
        }

        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.print("<h1>");

        // checks if there is a link associated with the page

        count = 0;
        int j = -1;
        while (channel.numberOfChildren() > count) {
            if (getChildElement(channel.child(count), "link") >= 0) {
                j = count;
            }
            count++;
        }

        // if there is a link, it prints it into the html code

        if (j > -1) {
            out.print("<a href=\"" + channel.child(j).child(0).label() + "\">");

            // if there is a title it is printed

            if (i > -1 && channel.child(i).numberOfChildren() != 0) {
                out.print((channel.child(i).child(0)).label());
            }

            out.print("</a>");
        } else {
            out.print("No title available");
        }

        out.println("</h1>");
        out.println("<p>");

        // checks if there is a description

        count = 0;
        i = -1;
        while (channel.numberOfChildren() > count) {
            if (getChildElement(channel.child(count), "description") >= 0) {
                i = count;
            }
            count++;
        }

        // if there is a description it is printed

        if (i > -1 && channel.child(i).numberOfChildren() != 0) {
            out.print((channel.child(i).child(0)).label());
        } else {
            out.print("No description available");
        }

        // the finishing part of the code is printed

        out.println("</p>");
        out.println("<table border=\"1\" style=\"width:100%\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table> </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // outputs the finishing part of the code

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // checks if there is a child with the title equivalent to a given string (tag)

        int place = -1;
        int count = 0;
        while (xml.numberOfChildren() > count) {
            if (xml.label().equals(tag)) {
                place = count;
            }
            count++;
        }

        // else it returns -1

        return place;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires <pre>
     * [the label of the root of item is an <item> tag] and out.is_open
     * </pre>
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // checks if there are child nodes for the date, source, title, and
        // link to the story

        int count = 0;
        int dateSave = -1;
        int sourceSave = -1;
        int titleSave = -1;
        int linkSave = -1;
        while (item.numberOfChildren() > count) {
            if (item.child(count).label().equals("pubDate")) {
                dateSave = count;
            }
            if (item.child(count).label().equals("source")) {
                sourceSave = count;
            }
            if (item.child(count).label().equals("title")) {
                titleSave = count;
            }
            if (item.child(count).label().equals("link")) {
                linkSave = count;
            }
            count++;
        }

        // if there is a date it is printed

        out.println("<tr>");
        out.print("<td>");
        if (dateSave > -1) {
            out.print(item.child(dateSave).child(0).label());
        } else {
            out.print("No date available");
        }
        out.println("</td>");

        // if there is a link to the source it is printed
        // if there is a source it is printed as well

        out.print("<td>");
        if (sourceSave > -1 && item.child(sourceSave).hasAttribute("url")) {
            out.print("<a href=\""
                    + item.child(sourceSave).attributeValue("url") + "\">");

            if (sourceSave > -1) {
                out.print(item.child(sourceSave).child(0).label());
            }

            out.print("</a>");
        } else {
            out.print("No source available");
        }
        out.println("</td>");

        // if there is a link to the story it is printed
        // if there is a title it is printed as well

        out.println("<td>");
        if (linkSave > -1) {
            out.print("<a href=\"" + item.child(linkSave).child(0).label()
                    + "\">");

            if (titleSave > -1) {
                out.print(item.child(titleSave).child(0).label());
            }

            out.print("</a>");
        } else {
            out.print("No title available");
        }
        out.println("</td>");
        out.println("</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the name of an XML file containing a list of URLs for RSS v2.0 feeds: ");
        String url = in.nextLine();

        // asks for an appropriate source of RSS feeds

        out.println();

        out.print("Enter the name of output file (do NOT incude .html at the end): ");
        String fileName = in.nextLine();

        // asks for an output file name

        XMLTree xml = new XMLTree1(url);

        // the XMLTree is the file entered by the user

        SimpleWriter file = new SimpleWriter1L(fileName + ".html");

        // writes to the file that is the main page

        file.println("<html>");
        file.println("<head>");
        file.println("<title>");

        if (xml.hasAttribute("title")) {
            file.println(xml.attributeValue("title"));
        } else {
            file.println("");
        }

        // sets the title of the page to the title tag in the XMLTree, or nothing if absent

        file.println("</title>");
        file.println("<body>");
        file.println("<h2>");

        if (xml.hasAttribute("title")) {
            file.println(xml.attributeValue("title"));
        } else {
            file.println("");
        }

        // sets the header of the page to the title tag in the XMLTree, or nothing if absent

        file.println("</h2>");

        int pcount = 0;
        while (pcount < xml.numberOfChildren()) {

            SimpleWriter fileout = new SimpleWriter1L(xml.child(pcount)
                    .attributeValue("file"));

            // writes to individual files

            processFeed(xml.child(pcount).attributeValue("url"),
                    xml.child(pcount).attributeValue("file"), fileout);

            // calls method process item

            pcount++;
        }

        file.println("<ul>");

        int count = 0;
        while (count < xml.numberOfChildren()) {
            file.println("<li>");
            if (xml.child(count).hasAttribute("file")) {

                file.print("<a href=\"");
                file.print(xml.child(count).attributeValue("file"));
                file.print("\">");

            }
            if (xml.child(count).hasAttribute("name")) {
                file.print(xml.child(count).attributeValue("name"));
            }

            file.print("</a>");
            file.println("</li>");

            count++;
        }

        file.println("</ul>");
        file.println("</body>");

        outputFooter(file);
        // calls method outputFooter
    }
}
